/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.18.7.0 (NJsonSchema v9.10.70.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, from as _observableFrom, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getBigSizeData(): Observable<ReturnDataModel[]> {
        let url_ = this.baseUrl + "/api/BigSizeData";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBigSizeData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBigSizeData(<any>response_);
                } catch (e) {
                    return <Observable<ReturnDataModel[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ReturnDataModel[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetBigSizeData(response: HttpResponseBase): Observable<ReturnDataModel[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ReturnDataModel.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ReturnDataModel[]>(<any>null);
    }

    /**
     * @return Success
     */
    getAll(): Observable<string[]> {
        let url_ = this.baseUrl + "/api/Values";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<string[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<string[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string[]>(<any>null);
    }

    /**
     * @param value (optional) 
     * @return Success
     */
    post(value: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Values";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return Success
     */
    get(id: number): Observable<string> {
        let url_ = this.baseUrl + "/api/Values/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param value (optional) 
     * @return Success
     */
    put(id: number, value: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Values/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPut(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processPut(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return Success
     */
    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Values/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export class ReturnDataModel implements IReturnDataModel {
    st1?: string | undefined;
    st2?: string | undefined;
    st3?: string | undefined;
    st4?: string | undefined;
    st5?: string | undefined;
    st6?: string | undefined;
    st7?: string | undefined;
    st8?: string | undefined;
    st9?: string | undefined;
    st10?: string | undefined;
    st11?: string | undefined;
    st12?: string | undefined;
    st13?: string | undefined;
    st14?: string | undefined;
    st15?: string | undefined;
    st16?: string | undefined;
    st17?: string | undefined;
    st18?: string | undefined;
    st19?: string | undefined;
    st20?: string | undefined;
    st21?: string | undefined;
    st22?: string | undefined;
    st23?: string | undefined;
    st24?: string | undefined;
    st25?: string | undefined;
    st26?: string | undefined;
    st27?: string | undefined;
    st28?: string | undefined;
    st29?: string | undefined;
    st30?: string | undefined;
    st31?: string | undefined;
    st32?: string | undefined;
    st33?: string | undefined;
    st34?: string | undefined;
    st35?: string | undefined;
    st36?: string | undefined;
    st37?: string | undefined;
    st38?: string | undefined;
    st39?: string | undefined;
    st40?: string | undefined;
    st41?: string | undefined;
    st42?: string | undefined;
    st43?: string | undefined;
    st44?: string | undefined;
    st45?: string | undefined;
    st46?: string | undefined;
    st47?: string | undefined;
    st48?: string | undefined;
    st49?: string | undefined;
    st50?: string | undefined;

    constructor(data?: IReturnDataModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.st1 = data["st1"];
            this.st2 = data["st2"];
            this.st3 = data["st3"];
            this.st4 = data["st4"];
            this.st5 = data["st5"];
            this.st6 = data["st6"];
            this.st7 = data["st7"];
            this.st8 = data["st8"];
            this.st9 = data["st9"];
            this.st10 = data["st10"];
            this.st11 = data["st11"];
            this.st12 = data["st12"];
            this.st13 = data["st13"];
            this.st14 = data["st14"];
            this.st15 = data["st15"];
            this.st16 = data["st16"];
            this.st17 = data["st17"];
            this.st18 = data["st18"];
            this.st19 = data["st19"];
            this.st20 = data["st20"];
            this.st21 = data["st21"];
            this.st22 = data["st22"];
            this.st23 = data["st23"];
            this.st24 = data["st24"];
            this.st25 = data["st25"];
            this.st26 = data["st26"];
            this.st27 = data["st27"];
            this.st28 = data["st28"];
            this.st29 = data["st29"];
            this.st30 = data["st30"];
            this.st31 = data["st31"];
            this.st32 = data["st32"];
            this.st33 = data["st33"];
            this.st34 = data["st34"];
            this.st35 = data["st35"];
            this.st36 = data["st36"];
            this.st37 = data["st37"];
            this.st38 = data["st38"];
            this.st39 = data["st39"];
            this.st40 = data["st40"];
            this.st41 = data["st41"];
            this.st42 = data["st42"];
            this.st43 = data["st43"];
            this.st44 = data["st44"];
            this.st45 = data["st45"];
            this.st46 = data["st46"];
            this.st47 = data["st47"];
            this.st48 = data["st48"];
            this.st49 = data["st49"];
            this.st50 = data["st50"];
        }
    }

    static fromJS(data: any): ReturnDataModel {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnDataModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["st1"] = this.st1;
        data["st2"] = this.st2;
        data["st3"] = this.st3;
        data["st4"] = this.st4;
        data["st5"] = this.st5;
        data["st6"] = this.st6;
        data["st7"] = this.st7;
        data["st8"] = this.st8;
        data["st9"] = this.st9;
        data["st10"] = this.st10;
        data["st11"] = this.st11;
        data["st12"] = this.st12;
        data["st13"] = this.st13;
        data["st14"] = this.st14;
        data["st15"] = this.st15;
        data["st16"] = this.st16;
        data["st17"] = this.st17;
        data["st18"] = this.st18;
        data["st19"] = this.st19;
        data["st20"] = this.st20;
        data["st21"] = this.st21;
        data["st22"] = this.st22;
        data["st23"] = this.st23;
        data["st24"] = this.st24;
        data["st25"] = this.st25;
        data["st26"] = this.st26;
        data["st27"] = this.st27;
        data["st28"] = this.st28;
        data["st29"] = this.st29;
        data["st30"] = this.st30;
        data["st31"] = this.st31;
        data["st32"] = this.st32;
        data["st33"] = this.st33;
        data["st34"] = this.st34;
        data["st35"] = this.st35;
        data["st36"] = this.st36;
        data["st37"] = this.st37;
        data["st38"] = this.st38;
        data["st39"] = this.st39;
        data["st40"] = this.st40;
        data["st41"] = this.st41;
        data["st42"] = this.st42;
        data["st43"] = this.st43;
        data["st44"] = this.st44;
        data["st45"] = this.st45;
        data["st46"] = this.st46;
        data["st47"] = this.st47;
        data["st48"] = this.st48;
        data["st49"] = this.st49;
        data["st50"] = this.st50;
        return data; 
    }
}

export interface IReturnDataModel {
    st1?: string | undefined;
    st2?: string | undefined;
    st3?: string | undefined;
    st4?: string | undefined;
    st5?: string | undefined;
    st6?: string | undefined;
    st7?: string | undefined;
    st8?: string | undefined;
    st9?: string | undefined;
    st10?: string | undefined;
    st11?: string | undefined;
    st12?: string | undefined;
    st13?: string | undefined;
    st14?: string | undefined;
    st15?: string | undefined;
    st16?: string | undefined;
    st17?: string | undefined;
    st18?: string | undefined;
    st19?: string | undefined;
    st20?: string | undefined;
    st21?: string | undefined;
    st22?: string | undefined;
    st23?: string | undefined;
    st24?: string | undefined;
    st25?: string | undefined;
    st26?: string | undefined;
    st27?: string | undefined;
    st28?: string | undefined;
    st29?: string | undefined;
    st30?: string | undefined;
    st31?: string | undefined;
    st32?: string | undefined;
    st33?: string | undefined;
    st34?: string | undefined;
    st35?: string | undefined;
    st36?: string | undefined;
    st37?: string | undefined;
    st38?: string | undefined;
    st39?: string | undefined;
    st40?: string | undefined;
    st41?: string | undefined;
    st42?: string | undefined;
    st43?: string | undefined;
    st44?: string | undefined;
    st45?: string | undefined;
    st46?: string | undefined;
    st47?: string | undefined;
    st48?: string | undefined;
    st49?: string | undefined;
    st50?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}